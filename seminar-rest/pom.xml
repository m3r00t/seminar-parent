<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.redhat.demo</groupId>
		<artifactId>seminar-parent</artifactId>
		<version>1.0.0</version>
	</parent>
	<artifactId>seminar-rest</artifactId>
	<packaging>war</packaging>

	<properties>
		<docker.from>fabric8/tomcat-8.0</docker.from>

		<docker.image>m3r00t/${project.artifactId}:${project.version}</docker.image>
		<docker.assemblyDescriptorRef>rootWar</docker.assemblyDescriptorRef>
		<docker.port.container.jolokia>8778</docker.port.container.jolokia>
		<docker.port.container.http>8080</docker.port.container.http>

		<fabric8.service.name>seminar-rest</fabric8.service.name>
		<fabric8.service.port>9103</fabric8.service.port>
		<fabric8.service.containerPort>8080</fabric8.service.containerPort>

		<fabric8.label.component>${project.artifactId}</fabric8.label.component>
		<fabric8.label.container>tomcat</fabric8.label.container>
		<fabric8.label.group>demo</fabric8.label.group>
		<fabric8.iconRef>tomcat</fabric8.iconRef>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-project</artifactId>
				<version>${fabric8.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
		</dependency>

		<!-- enable JMX -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-management</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>

		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-cxf</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-servlet_3.0_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>



		<!-- We are also building a small Java client application that we can use 
			to test our web web services. For performing the HTTP requests, we are using 
			Apache Commons HttpClient. -->
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
		</dependency>

		<!-- For logging, we will use SLF4J, which is also available in the container 
			by default. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<!-- use log4j as logger -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>

		<!-- Test Dependencies -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.wordnik</groupId>
			<artifactId>swagger-jaxrs_2.10</artifactId>
			<version>${swagger-jaxrs.version}</version>
			<optional>true</optional>
			<exclusions>
				<!-- avoid this old dependency which breaks CXF -->
				<exclusion>
					<groupId>javax.ws.rs</groupId>
					<artifactId>jsr311-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<!-- Skip Test by default and enable them only in Test profile -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${version.maven-surefire-plugin}</version>
				<configuration>
					<skipTests>${skipTests}</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-java2wadl-plugin</artifactId>
				<version>${cxf.version}</version>
				<executions>
					<execution>
						<id>process-classes</id>
						<phase>process-classes</phase>
						<goals>
							<goal>java2wadl</goal>
						</goals>
						<configuration>
							<classResourceNames>
								<classResourceName>io.fabric8.quickstarts.rest.CustomerService</classResourceName>
							</classResourceNames>
							<attachWadl>false</attachWadl>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>reserve-network-port</id>
						<goals>
							<goal>reserve-network-port</goal>
						</goals>
						<phase>process-test-resources</phase>
						<configuration>
							<portNames>
								<portName>test.server.port</portName>
							</portNames>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<descriptorRef>${docker.assemblyDescriptorRef}</descriptorRef>
								</assembly>
								<env>
									<CATALINA_OPTS>-javaagent:/opt/tomcat/jolokia-agent.jar=host=0.0.0.0,port=8778</CATALINA_OPTS>
								</env>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<profile>
			<id>test</id>
			<properties>
				<skipTests>false</skipTests>
			</properties>
			<build>
				<defaultGoal>verify</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>
						<version>${tomcat-plugin.version}</version>
						<executions>
							<execution>
								<id>start-tomcat</id>
								<goals>
									<goal>run-war</goal>
								</goals>
								<phase>pre-integration-test</phase>
								<configuration>
									<port>${test.server.port}</port>
									<path>/jaxrs-service</path>
									<fork>true</fork>
									<useSeparateTomcatClassLoader>true</useSeparateTomcatClassLoader>
								</configuration>
							</execution>
							<execution>
								<id>stop-tomcat</id>
								<goals>
									<goal>shutdown</goal>
								</goals>
								<phase>post-integration-test</phase>
								<configuration>
									<path>/jaxrs-service</path>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-build</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>build</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-push</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jube</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8.jube</groupId>
						<artifactId>jube-maven-plugin</artifactId>
						<version>${jube.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>build</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>